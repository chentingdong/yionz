// schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Yionz videos artifact
model Artifact {
  id         String    @id @unique @default(cuid())
  name       String    @default("")
  prompt     String    @default("")
  story      String    @default("")
  template   Template? @relation(fields: [templateId], references: [id])
  templateId String?
  movie      Movie?    @relation(fields: [movieId], references: [id])
  movieId    String?   @unique
  clips      Clip[]
  loading    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([id, templateId])
}

// movie dimension
model Demension {
  id     String @id @default(cuid())
  width  Int    @default(786)
  height Int    @default(512)
}

// one clip in the artifact
model Clip {
  id          String     @id @unique @default(cuid())
  order       Int        @default(0)
  Artifact    Artifact?  @relation(fields: [artifactId], references: [id])
  artifactId  String?
  image       Image?     @relation(fields: [imageId], references: [id])
  imageId     String?    @unique
  animation   Animation? @relation(fields: [animationId], references: [id])
  animationId String?    @unique
  video       Video?     @relation(fields: [videoId], references: [id])
  videoId     String?    @unique
  audio       Audio?     @relation(fields: [audioId], references: [id])
  audioId     String?    @unique
  film        Film?      @relation(fields: [filmId], references: [id])
  filmId      String?    @unique
  loading     Boolean    @default(false)

  @@unique([artifactId, order])
}

// AI generated images/animations
model Animation {
  id                    String  @id @default(cuid())
  prompt                String  @default("")
  url                   String  @default("")
  duration              Int     @default(0)
  frameCount            Int     @default(1)
  numInterpolationSteps Int     @default(1)
  fps                   Int     @default(1)
  seed                  Int     @default(42)
  thumbnail             String  @default("")
  subtitle              String  @default("")
  loading               Boolean @default(false)
  Clip                  Clip?
  clipId                String? @unique
}

// User uploaded video or given url
model Video {
  id      String  @id @default(cuid())
  url     String  @default("")
  startAt Int     @default(0)
  endAt   Int     @default(1)
  Clip    Clip?
  clipId  String? @unique
}

// User uploaded image
model Image {
  id     String  @id @default(cuid())
  url    String  @default("")
  Clip   Clip?
  clipId String? @unique
}

// text to audio
model Audio {
  id       String  @id @default(cuid())
  text     String  @default("")
  url      String  @default("")
  duration Int     @default(1)
  loading  Boolean @default(false)
  Clip     Clip?
  clipId   String? @unique
}

// combined audio and animation/image/video(choose one)
model Film {
  id       String  @id @default(cuid())
  url      String  @default("")
  duration Int     @default(0)
  loading  Boolean @default(false)
  Clip     Clip?
  clipId   String? @unique
}

// artifact level movie, with audio and video
model Movie {
  id       String     @id @default(cuid())
  url      String     @default("")
  loading  Boolean    @default(false)
  Artifact Artifact[]
}

// template for certain style of movie.
model Template {
  id           String     @id @default(cuid())
  name         String
  instructions Json       @default("{}")
  params       Json       @default("{}")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  Artifact     Artifact[]
}

///////////////////
// Authorization //
///////////////////

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  artifacts     Artifact[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
