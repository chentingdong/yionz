// schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Yionz videos artifact
model Artifact {
  id         String    @id @unique @default(cuid())
  name       String    @default("")
  prompt     String    @default("")
  story      String?
  template   Template? @relation(fields: [templateId], references: [id])
  templateId String?
  movie      Movie     @relation(fields: [movieId], references: [id])
  movieId    String
  clips      Clip[]
  loading    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?

  @@map("Artifact")
}

model Demension {
  id     String @id @default(cuid())
  width  Int    @default(786)
  height Int    @default(512)
}

model Clip {
  id          Int       @id @default(0)
  Artifact    Artifact  @relation(fields: [ArtifactId], references: [id])
  ArtifactId  String
  images      Image[]
  animation   Animation @relation(fields: [animationId], references: [id])
  animationId String    @unique
  video       Video     @relation(fields: [videoId], references: [id])
  videoId     String    @unique
  audio       Audio     @relation(fields: [audioId], references: [id])
  audioId     String    @unique
  film        Film      @relation(fields: [filmId], references: [id])
  filmId      String    @unique
  loading     Boolean   @default(false)
}

model Animation {
  id                    String  @id @default(cuid())
  url                   String
  duration              Int
  frameCount            Int
  numInterpolationSteps Int
  fps                   Int
  seed                  Int
  thumbnail             String
  subtitle              String
  Clip                  Clip?
  loading               Boolean @default(false)
}

model Video {
  id      String @id @default(cuid())
  url     String
  startAt Int
  endAt   Int
  Clip    Clip[]
}

model Image {
  id          String  @id @default(cuid())
  instruction String
  prompt      String
  url         String
  seed        Int
  Clip        Clip[]
  loading     Boolean @default(false)
}

model Audio {
  id       String  @id @default(cuid())
  text     String
  url      String
  duration Int
  loading  Boolean
  Clip     Clip[]
}

model Film {
  id       String  @id @default(cuid())
  url      String
  duration Int
  Clip     Clip[]
  loading  Boolean @default(false)
}

model Movie {
  id       String     @id @default(cuid())
  url      String     @default("")
  Artifact Artifact[]
  loading  Boolean    @default(false)
}

model Template {
  id           String     @id @default(cuid())
  name         String
  instructions Json
  params       Json
  Artifact     Artifact[]
}

// Authorization
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  artifacts     Artifact[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
